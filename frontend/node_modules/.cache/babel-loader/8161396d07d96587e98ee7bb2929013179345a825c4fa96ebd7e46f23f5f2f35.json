{"ast":null,"code":"var _jsxFileName = \"/Users/raahim/Desktop/Coding/Headstarter/VideoAI/frontend/src/App.js\",\n  _s = $RefreshSig$();\n// App.js - Simple Video Analysis App\nimport React, { useState, useRef, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://localhost:8000';\nfunction App() {\n  _s();\n  // Simple state management - each variable has one clear purpose\n  const [videoUrl, setVideoUrl] = useState(''); // YouTube URL input\n  const [question, setQuestion] = useState(''); // User's question\n  const [messages, setMessages] = useState([]); // Chat messages\n  const [loading, setLoading] = useState(false); // Loading state\n  const [videoId, setVideoId] = useState(''); // Current video ID\n  const [videoTitle, setVideoTitle] = useState(''); // Video title\n  const [timestamps, setTimestamps] = useState([]); // Auto-generated timestamps\n  const [error, setError] = useState(''); // Error messages\n  const [notifications, setNotifications] = useState([]); // Right-side notifications\n\n  const chatRef = useRef(null);\n\n  // Auto-scroll chat when new messages arrive\n  useEffect(() => {\n    if (chatRef.current) {\n      chatRef.current.scrollTop = chatRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  // Show notification (right side alert)\n  const showNotification = (message, type = 'info', persistent = false) => {\n    const id = Date.now();\n    const newNotification = {\n      id,\n      message,\n      type,\n      persistent\n    };\n    setNotifications(prev => [...prev, newNotification]);\n\n    // Auto-remove after 4 seconds (unless it's persistent)\n    if (!persistent) {\n      setTimeout(() => {\n        setNotifications(prev => prev.filter(n => n.id !== id));\n      }, 4000);\n    }\n    return id; // Return ID so we can remove it manually later\n  };\n\n  // Remove specific notification by ID\n  const removeNotification = id => {\n    setNotifications(prev => prev.filter(n => n.id !== id));\n  };\n\n  // Get YouTube video ID from URL\n  const getVideoId = url => {\n    const patterns = [/youtube\\.com\\/watch\\?v=([^&\\n?#]+)/, /youtu\\.be\\/([^&\\n?#]+)/, /youtube\\.com\\/embed\\/([^&\\n?#]+)/];\n    for (let pattern of patterns) {\n      const match = url.match(pattern);\n      if (match) return match[1];\n    }\n    return null;\n  };\n\n  // Load video and auto-generate timestamps\n  const loadVideo = async () => {\n    console.log('üîç DEBUG: loadVideo called with new code!');\n    const id = getVideoId(videoUrl);\n    if (!id) {\n      setError('Please enter a valid YouTube URL');\n      return;\n    }\n    setVideoId(id);\n    setMessages([]);\n    setTimestamps([]);\n    setError('');\n\n    // Show persistent loading notification for video processing\n    const videoLoadingId = showNotification('üé¨ Loading video and extracting transcript', 'loading', true);\n    try {\n      // First, try to get the transcript to ensure video is processable\n      const transcriptResponse = await fetch(`${API_BASE_URL}/process-youtube`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          url: videoUrl\n        })\n      });\n      const transcriptData = await transcriptResponse.json();\n\n      // üîç DEBUG: Check API response structure\n      console.log('üîç DEBUG - API Response:', {\n        success: transcriptData.success,\n        has_timestamps: transcriptData.has_timestamps,\n        structured_transcript: transcriptData.structured_transcript ? 'Present' : 'Missing',\n        method_used: transcriptData.method_used,\n        total_segments: transcriptData.total_segments\n      });\n      if (!transcriptData.success) {\n        removeNotification(videoLoadingId);\n        showNotification('‚ùå Failed to process video: ' + transcriptData.error, 'error');\n        setError('Could not extract transcript from this video');\n        return;\n      }\n\n      // Video processed successfully - remove loading notification\n      removeNotification(videoLoadingId);\n      showNotification('‚úÖ Video transcript extracted successfully!', 'success');\n\n      // Set video title from transcript response\n      setVideoTitle(transcriptData.video_title || 'Unknown Video');\n\n      // Add welcome message\n      setMessages([{\n        type: 'system',\n        content: `Video loaded! Ask questions about \"${transcriptData.video_title || 'this video'}\".`,\n        time: new Date().toLocaleTimeString()\n      }]);\n\n      // Use real timestamp data from backend instead of generating manually\n      if (transcriptData.has_timestamps && transcriptData.structured_transcript) {\n        generateRealTimestamps(transcriptData.structured_transcript);\n      } else {\n        // Fallback: Generate chapters using AI if no structured data\n        await generateTimestamps(videoUrl);\n      }\n    } catch (error) {\n      removeNotification(videoLoadingId);\n      showNotification('‚ùå Connection error: ' + error.message, 'error');\n      setError('Failed to connect to server');\n    }\n  };\n\n  // üîß FIXED: Use real structured timestamp data with HH:MM:SS format\n  const generateRealTimestamps = structuredTranscript => {\n    const timestampLoadingId = showNotification('üïê Creating chapters from real timestamps...', 'loading', true);\n    try {\n      const chapters = [];\n      const totalSegments = structuredTranscript.length;\n\n      // Create chapters every ~2-3 minutes (adaptive based on video length)\n      const segmentsPerChapter = Math.max(50, Math.floor(totalSegments / 15)); // Aim for ~15 chapters max\n\n      for (let i = 0; i < totalSegments; i += segmentsPerChapter) {\n        const segment = structuredTranscript[i];\n        if (segment && segment.text && segment.start_formatted) {\n          // Create meaningful chapter title from content\n          let title = segment.text.trim();\n\n          // Clean up common phrases\n          title = title.replace(/^(welcome to|hello|hi there|today we|in this)/i, '');\n          title = title.replace(/^(fact|number|tip)( \\d+)?:?/i, '');\n\n          // Take first few meaningful words\n          const words = title.split(' ').filter(word => word.length > 2 && !['the', 'and', 'but', 'for', 'are', 'will', 'can', 'you', 'your'].includes(word.toLowerCase()));\n          const chapterTitle = words.slice(0, 3).join(' ');\n          if (chapterTitle.length > 3) {\n            // üîß FIXED: Parse HH:MM:SS format from backend\n            const [hours, minutes, seconds] = segment.start_formatted.split(':').map(Number);\n            const totalSeconds = hours * 3600 + minutes * 60 + seconds;\n            chapters.push({\n              time: segment.start_formatted,\n              // Use HH:MM:SS format directly\n              title: chapterTitle.length > 30 ? chapterTitle.substring(0, 27) + '...' : chapterTitle,\n              seconds: totalSeconds\n            });\n          }\n        }\n      }\n\n      // Add final chapter\n      if (structuredTranscript.length > 0) {\n        const lastSegment = structuredTranscript[structuredTranscript.length - 1];\n        if (lastSegment && lastSegment.end_formatted) {\n          const [hours, minutes, seconds] = lastSegment.end_formatted.split(':').map(Number);\n          const totalSeconds = hours * 3600 + minutes * 60 + seconds;\n          chapters.push({\n            time: lastSegment.end_formatted,\n            title: 'Conclusion',\n            seconds: totalSeconds\n          });\n        }\n      }\n      setTimestamps(chapters);\n      removeNotification(timestampLoadingId);\n      showNotification('‚úÖ Real timestamps generated!', 'success');\n    } catch (error) {\n      console.error('Error generating real timestamps:', error);\n      removeNotification(timestampLoadingId);\n      showNotification('‚ö†Ô∏è Using fallback timestamp generation', 'error');\n      // Fallback to AI generation\n      generateTimestamps(videoUrl);\n    }\n  };\n\n  // üîß FIXED: Fallback function with HH:MM:SS format\n  const generateTimestamps = async url => {\n    const timestampLoadingId = showNotification('üïê Generating timestamps...', 'loading', true);\n    try {\n      const response = await fetch(`${API_BASE_URL}/smart-question`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          url: url,\n          question: \"Create video chapters with short titles. Format: '0:00:00 - Introduction', '0:02:30 - Main Topic', etc. Keep titles under 5 words.\"\n        })\n      });\n      const data = await response.json();\n      if (data.success) {\n        // Update video title if we got it from this response\n        if (data.video_title && !videoTitle) {\n          setVideoTitle(data.video_title);\n        }\n\n        // üîß FIXED: Extract HH:MM:SS timestamps from AI response\n        const lines = data.answer.split('\\n');\n        const newTimestamps = [];\n        lines.forEach(line => {\n          const match = line.match(/(\\d{1,2}):(\\d{2}):(\\d{2})\\s*[-‚Äì]\\s*(.+)/);\n          if (match) {\n            const hours = parseInt(match[1]);\n            const minutes = parseInt(match[2]);\n            const seconds = parseInt(match[3]);\n            const title = match[4].trim().replace(/\\*\\*/g, ''); // Remove markdown\n\n            // Always display as HH:MM:SS\n            const displayTime = `${hours}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n            newTimestamps.push({\n              time: displayTime,\n              title: title.length > 40 ? title.substring(0, 37) + '...' : title,\n              seconds: hours * 3600 + minutes * 60 + seconds\n            });\n          }\n        });\n        setTimestamps(newTimestamps);\n        removeNotification(timestampLoadingId);\n        showNotification('‚úÖ AI timestamps generated!', 'success');\n      } else {\n        removeNotification(timestampLoadingId);\n        showNotification('‚ö†Ô∏è Could not generate timestamps', 'error');\n      }\n    } catch (error) {\n      removeNotification(timestampLoadingId);\n      showNotification('‚ùå Failed to generate timestamps', 'error');\n    }\n  };\n\n  // Ask question about video\n  const askQuestion = async () => {\n    if (!question.trim()) {\n      setError('Please enter a question');\n      return;\n    }\n    if (!videoUrl.trim()) {\n      setError('Please load a video first');\n      return;\n    }\n    setLoading(true);\n    setError('');\n\n    // Add user message\n    const userMessage = {\n      type: 'user',\n      content: question\n    };\n    setMessages(prev => [...prev, userMessage]);\n    try {\n      const response = await fetch(`${API_BASE_URL}/smart-question`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          url: videoUrl,\n          question: question + \" Please include specific timestamps in your response using format (0:02:30) without extra words like 'around' or 'at'.\"\n        })\n      });\n      const data = await response.json();\n      if (data.success) {\n        const aiMessage = {\n          type: 'ai',\n          content: data.answer,\n          method: data.method_used\n        };\n        setMessages(prev => [...prev, aiMessage]);\n      } else {\n        setError(`Failed: ${data.error}`);\n      }\n    } catch (error) {\n      setError(`Connection error: ${error.message}`);\n    } finally {\n      setLoading(false);\n      setQuestion('');\n    }\n  };\n\n  // Handle Enter key\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && !loading) {\n      askQuestion();\n    }\n  };\n\n  // Jump to timestamp in video\n  const jumpToTime = seconds => {\n    const iframe = document.getElementById('youtube-player');\n    if (iframe) {\n      const baseUrl = iframe.src.split('?')[0];\n      iframe.src = `${baseUrl}?start=${seconds}&autoplay=1`;\n    }\n  };\n\n  // üîß FIXED: Text formatter for HH:MM:SS timestamps\n  const formatText = text => {\n    if (typeof text !== 'string') return text;\n\n    // Clean up markdown and convert to HTML\n    let formattedText = text.replace(/\\*\\*([^*]+)\\*\\*/g, '<strong class=\"bold-text\">$1</strong>') // **bold**\n    .replace(/\\*([^*]+)\\*/g, '<em class=\"italic-text\">$1</em>') // *italic*\n    .replace(/\\((\\d{1,2}):(\\d{2}):(\\d{2})\\)/g, '<span class=\"timestamp-placeholder\">$1:$2:$3</span>'); // HH:MM:SS timestamps\n\n    // Split by timestamp placeholders and create clickable buttons\n    const parts = formattedText.split(/<span class=\"timestamp-placeholder\">(\\d{1,2}:\\d{2}:\\d{2})<\\/span>/);\n    const result = [];\n    for (let i = 0; i < parts.length; i++) {\n      if (i % 2 === 0) {\n        // Regular text with HTML formatting\n        if (parts[i]) {\n          result.push(/*#__PURE__*/_jsxDEV(\"span\", {\n            dangerouslySetInnerHTML: {\n              __html: parts[i]\n            }\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 352,\n            columnNumber: 13\n          }, this));\n        }\n      } else {\n        // üîß FIXED: Parse HH:MM:SS timestamp and make it clickable\n        const [hours, minutes, seconds] = parts[i].split(':').map(Number);\n        const totalSeconds = hours * 3600 + minutes * 60 + seconds;\n        result.push(/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"timestamp-link\",\n          onClick: () => jumpToTime(totalSeconds),\n          children: parts[i]\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 11\n        }, this));\n      }\n    }\n    return result.length > 0 ? result : text;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notifications\",\n      children: notifications.map(notification => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `notification ${notification.type}`,\n        children: notification.message\n      }, notification.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 381,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\uD83C\\uDFAC Video Analysis AI\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Ask questions about any YouTube video!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"url-input\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"\\uD83D\\uDCF9 Load YouTube Video\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 402,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"Paste YouTube URL here...\",\n              value: videoUrl,\n              onChange: e => setVideoUrl(e.target.value),\n              className: \"url-field\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 404,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: loadVideo,\n              className: \"load-btn\",\n              children: \"Load Video\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 411,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 403,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 11\n        }, this), videoId && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"video-player\",\n          children: /*#__PURE__*/_jsxDEV(\"iframe\", {\n            id: \"youtube-player\",\n            src: `https://www.youtube.com/embed/${videoId}`,\n            title: \"YouTube video player\",\n            frameBorder: \"0\",\n            allowFullScreen: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 420,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 13\n        }, this), timestamps.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"timestamps-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"\\uD83D\\uDD50 Video Chapters\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 433,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Click any timestamp to jump to that moment\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 434,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"timestamps-list\",\n            children: timestamps.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"timestamp-item\",\n              onClick: () => jumpToTime(item.seconds),\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"time\",\n                children: item.time\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 442,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"title\",\n                children: item.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 443,\n                columnNumber: 21\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 437,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 435,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 432,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"\\uD83D\\uDCAC Ask Questions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 454,\n            columnNumber: 13\n          }, this), videoTitle && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"video-title\",\n            children: [\"\\uD83C\\uDFAC \", videoTitle]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 455,\n            columnNumber: 28\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 453,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-messages\",\n          ref: chatRef,\n          children: [messages.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"welcome\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Welcome! \\uD83D\\uDE80\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 462,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Load a video above and start asking questions\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 463,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"examples\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"example\",\n                children: \"\\uD83D\\uDCAC \\\"What is this video about?\\\"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 465,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"example\",\n                children: \"\\uD83C\\uDFA8 \\\"What color is the car?\\\"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 466,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"example\",\n                children: \"\\uD83D\\uDCDD \\\"Summarize the main points\\\"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 467,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 464,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 461,\n            columnNumber: 15\n          }, this), messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `message ${message.type}`,\n            children: [message.type === 'system' && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"system-msg\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                children: message.content\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 478,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 477,\n              columnNumber: 19\n            }, this), message.type === 'user' && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"user-msg\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"avatar\",\n                children: \"You\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 485,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"content\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"text\",\n                  children: message.content\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 487,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 486,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 484,\n              columnNumber: 19\n            }, this), message.type === 'ai' && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ai-msg\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"avatar\",\n                children: \"\\uD83E\\uDD16\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 495,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"content\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"badge\",\n                  children: message.method === 'Visual Analysis' ? 'üëÅÔ∏è Visual' : 'üìù Text'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 497,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"text\",\n                  children: formatText(message.content)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 500,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 496,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 494,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 473,\n            columnNumber: 15\n          }, this)), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message ai\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ai-msg\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"avatar\",\n                children: \"\\uD83E\\uDD16\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 513,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"content\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"loading\",\n                  children: \"Analyzing video\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 515,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 514,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 512,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 511,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 459,\n          columnNumber: 11\n        }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error\",\n          children: [\"\\u26A0\\uFE0F \", error, /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setError(''),\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 526,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 524,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question-input\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"Ask any question about the video...\",\n              value: question,\n              onChange: e => setQuestion(e.target.value),\n              onKeyPress: handleKeyPress,\n              disabled: loading,\n              className: \"question-field\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 533,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: askQuestion,\n              disabled: loading || !question.trim() || !videoId,\n              className: \"ask-btn\",\n              children: loading ? '‚è≥' : 'üöÄ'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 542,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 532,\n            columnNumber: 13\n          }, this), videoId && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"hint\",\n            children: \"\\uD83D\\uDCA1 Ask about content, visuals, or request summaries!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 552,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 531,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 452,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      className: \"footer\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\u26A1 Powered by AI \\u2022 \\uD83C\\uDFAF Smart Analysis \\u2022 \\u23F0 Auto-Timestamps\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 562,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 561,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 379,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"+EgwkWHNCUpaBbjHwY60bEu6vNc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","API_BASE_URL","App","_s","videoUrl","setVideoUrl","question","setQuestion","messages","setMessages","loading","setLoading","videoId","setVideoId","videoTitle","setVideoTitle","timestamps","setTimestamps","error","setError","notifications","setNotifications","chatRef","current","scrollTop","scrollHeight","showNotification","message","type","persistent","id","Date","now","newNotification","prev","setTimeout","filter","n","removeNotification","getVideoId","url","patterns","pattern","match","loadVideo","console","log","videoLoadingId","transcriptResponse","fetch","method","headers","body","JSON","stringify","transcriptData","json","success","has_timestamps","structured_transcript","method_used","total_segments","video_title","content","time","toLocaleTimeString","generateRealTimestamps","generateTimestamps","structuredTranscript","timestampLoadingId","chapters","totalSegments","length","segmentsPerChapter","Math","max","floor","i","segment","text","start_formatted","title","trim","replace","words","split","word","includes","toLowerCase","chapterTitle","slice","join","hours","minutes","seconds","map","Number","totalSeconds","push","substring","lastSegment","end_formatted","response","data","lines","answer","newTimestamps","forEach","line","parseInt","displayTime","toString","padStart","askQuestion","userMessage","aiMessage","handleKeyPress","e","key","jumpToTime","iframe","document","getElementById","baseUrl","src","formatText","formattedText","parts","result","dangerouslySetInnerHTML","__html","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","children","notification","placeholder","value","onChange","target","frameBorder","allowFullScreen","item","index","ref","onKeyPress","disabled","_c","$RefreshReg$"],"sources":["/Users/raahim/Desktop/Coding/Headstarter/VideoAI/frontend/src/App.js"],"sourcesContent":["// App.js - Simple Video Analysis App\nimport React, { useState, useRef, useEffect } from 'react';\nimport './App.css';\n\nconst API_BASE_URL = 'http://localhost:8000';\n\nfunction App() {\n  // Simple state management - each variable has one clear purpose\n  const [videoUrl, setVideoUrl] = useState('');           // YouTube URL input\n  const [question, setQuestion] = useState('');           // User's question\n  const [messages, setMessages] = useState([]);           // Chat messages\n  const [loading, setLoading] = useState(false);          // Loading state\n  const [videoId, setVideoId] = useState('');             // Current video ID\n  const [videoTitle, setVideoTitle] = useState('');       // Video title\n  const [timestamps, setTimestamps] = useState([]);       // Auto-generated timestamps\n  const [error, setError] = useState('');                 // Error messages\n  const [notifications, setNotifications] = useState([]); // Right-side notifications\n  \n  const chatRef = useRef(null);\n\n  // Auto-scroll chat when new messages arrive\n  useEffect(() => {\n    if (chatRef.current) {\n      chatRef.current.scrollTop = chatRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  // Show notification (right side alert)\n  const showNotification = (message, type = 'info', persistent = false) => {\n    const id = Date.now();\n    const newNotification = { id, message, type, persistent };\n    setNotifications(prev => [...prev, newNotification]);\n    \n    // Auto-remove after 4 seconds (unless it's persistent)\n    if (!persistent) {\n      setTimeout(() => {\n        setNotifications(prev => prev.filter(n => n.id !== id));\n      }, 4000);\n    }\n    \n    return id; // Return ID so we can remove it manually later\n  };\n\n  // Remove specific notification by ID\n  const removeNotification = (id) => {\n    setNotifications(prev => prev.filter(n => n.id !== id));\n  };\n\n  // Get YouTube video ID from URL\n  const getVideoId = (url) => {\n    const patterns = [\n      /youtube\\.com\\/watch\\?v=([^&\\n?#]+)/,\n      /youtu\\.be\\/([^&\\n?#]+)/,\n      /youtube\\.com\\/embed\\/([^&\\n?#]+)/\n    ];\n    \n    for (let pattern of patterns) {\n      const match = url.match(pattern);\n      if (match) return match[1];\n    }\n    return null;\n  };\n\n  // Load video and auto-generate timestamps\n  const loadVideo = async () => {\n    console.log('üîç DEBUG: loadVideo called with new code!');\n    const id = getVideoId(videoUrl);\n    if (!id) {\n      setError('Please enter a valid YouTube URL');\n      return;\n    }\n\n    setVideoId(id);\n    setMessages([]);\n    setTimestamps([]);\n    setError('');\n    \n    // Show persistent loading notification for video processing\n    const videoLoadingId = showNotification('üé¨ Loading video and extracting transcript', 'loading', true);\n    \n    try {\n      // First, try to get the transcript to ensure video is processable\n      const transcriptResponse = await fetch(`${API_BASE_URL}/process-youtube`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ url: videoUrl })\n      });\n\n      const transcriptData = await transcriptResponse.json();\n\n      // üîç DEBUG: Check API response structure\n      console.log('üîç DEBUG - API Response:', {\n        success: transcriptData.success,\n        has_timestamps: transcriptData.has_timestamps,\n        structured_transcript: transcriptData.structured_transcript ? 'Present' : 'Missing',\n        method_used: transcriptData.method_used,\n        total_segments: transcriptData.total_segments\n      });\n\n      if (!transcriptData.success) {\n        removeNotification(videoLoadingId);\n        showNotification('‚ùå Failed to process video: ' + transcriptData.error, 'error');\n        setError('Could not extract transcript from this video');\n        return;\n      }\n\n      // Video processed successfully - remove loading notification\n      removeNotification(videoLoadingId);\n      showNotification('‚úÖ Video transcript extracted successfully!', 'success');\n      \n      // Set video title from transcript response\n      setVideoTitle(transcriptData.video_title || 'Unknown Video');\n      \n      // Add welcome message\n      setMessages([{\n        type: 'system',\n        content: `Video loaded! Ask questions about \"${transcriptData.video_title || 'this video'}\".`,\n        time: new Date().toLocaleTimeString()\n      }]);\n\n      // Use real timestamp data from backend instead of generating manually\n      if (transcriptData.has_timestamps && transcriptData.structured_transcript) {\n        generateRealTimestamps(transcriptData.structured_transcript);\n      } else {\n        // Fallback: Generate chapters using AI if no structured data\n        await generateTimestamps(videoUrl);\n      }\n      \n    } catch (error) {\n      removeNotification(videoLoadingId);\n      showNotification('‚ùå Connection error: ' + error.message, 'error');\n      setError('Failed to connect to server');\n    }\n  };\n\n  // üîß FIXED: Use real structured timestamp data with HH:MM:SS format\n  const generateRealTimestamps = (structuredTranscript) => {\n    const timestampLoadingId = showNotification('üïê Creating chapters from real timestamps...', 'loading', true);\n    \n    try {\n      const chapters = [];\n      const totalSegments = structuredTranscript.length;\n      \n      // Create chapters every ~2-3 minutes (adaptive based on video length)\n      const segmentsPerChapter = Math.max(50, Math.floor(totalSegments / 15)); // Aim for ~15 chapters max\n      \n      for (let i = 0; i < totalSegments; i += segmentsPerChapter) {\n        const segment = structuredTranscript[i];\n        \n        if (segment && segment.text && segment.start_formatted) {\n          // Create meaningful chapter title from content\n          let title = segment.text.trim();\n          \n          // Clean up common phrases\n          title = title.replace(/^(welcome to|hello|hi there|today we|in this)/i, '');\n          title = title.replace(/^(fact|number|tip)( \\d+)?:?/i, '');\n          \n          // Take first few meaningful words\n          const words = title.split(' ').filter(word => \n            word.length > 2 && \n            !['the', 'and', 'but', 'for', 'are', 'will', 'can', 'you', 'your'].includes(word.toLowerCase())\n          );\n          \n          const chapterTitle = words.slice(0, 3).join(' ');\n          \n          if (chapterTitle.length > 3) {\n            // üîß FIXED: Parse HH:MM:SS format from backend\n            const [hours, minutes, seconds] = segment.start_formatted.split(':').map(Number);\n            const totalSeconds = hours * 3600 + minutes * 60 + seconds;\n            \n            chapters.push({\n              time: segment.start_formatted, // Use HH:MM:SS format directly\n              title: chapterTitle.length > 30 ? chapterTitle.substring(0, 27) + '...' : chapterTitle,\n              seconds: totalSeconds\n            });\n          }\n        }\n      }\n      \n      // Add final chapter\n      if (structuredTranscript.length > 0) {\n        const lastSegment = structuredTranscript[structuredTranscript.length - 1];\n        if (lastSegment && lastSegment.end_formatted) {\n          const [hours, minutes, seconds] = lastSegment.end_formatted.split(':').map(Number);\n          const totalSeconds = hours * 3600 + minutes * 60 + seconds;\n          \n          chapters.push({\n            time: lastSegment.end_formatted,\n            title: 'Conclusion',\n            seconds: totalSeconds\n          });\n        }\n      }\n      \n      setTimestamps(chapters);\n      removeNotification(timestampLoadingId);\n      showNotification('‚úÖ Real timestamps generated!', 'success');\n      \n    } catch (error) {\n      console.error('Error generating real timestamps:', error);\n      removeNotification(timestampLoadingId);\n      showNotification('‚ö†Ô∏è Using fallback timestamp generation', 'error');\n      // Fallback to AI generation\n      generateTimestamps(videoUrl);\n    }\n  };\n\n  // üîß FIXED: Fallback function with HH:MM:SS format\n  const generateTimestamps = async (url) => {\n    const timestampLoadingId = showNotification('üïê Generating timestamps...', 'loading', true);\n    \n    try {\n      const response = await fetch(`${API_BASE_URL}/smart-question`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          url: url,\n          question: \"Create video chapters with short titles. Format: '0:00:00 - Introduction', '0:02:30 - Main Topic', etc. Keep titles under 5 words.\"\n        })\n      });\n\n      const data = await response.json();\n\n      if (data.success) {\n        // Update video title if we got it from this response\n        if (data.video_title && !videoTitle) {\n          setVideoTitle(data.video_title);\n        }\n        \n        // üîß FIXED: Extract HH:MM:SS timestamps from AI response\n        const lines = data.answer.split('\\n');\n        const newTimestamps = [];\n        \n        lines.forEach(line => {\n          const match = line.match(/(\\d{1,2}):(\\d{2}):(\\d{2})\\s*[-‚Äì]\\s*(.+)/);\n          if (match) {\n            const hours = parseInt(match[1]);\n            const minutes = parseInt(match[2]);\n            const seconds = parseInt(match[3]);\n            const title = match[4].trim().replace(/\\*\\*/g, ''); // Remove markdown\n            \n            // Always display as HH:MM:SS\n            const displayTime = `${hours}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n            \n            newTimestamps.push({\n              time: displayTime,\n              title: title.length > 40 ? title.substring(0, 37) + '...' : title,\n              seconds: hours * 3600 + minutes * 60 + seconds\n            });\n          }\n        });\n        \n        setTimestamps(newTimestamps);\n        removeNotification(timestampLoadingId);\n        showNotification('‚úÖ AI timestamps generated!', 'success');\n      } else {\n        removeNotification(timestampLoadingId);\n        showNotification('‚ö†Ô∏è Could not generate timestamps', 'error');\n      }\n    } catch (error) {\n      removeNotification(timestampLoadingId);\n      showNotification('‚ùå Failed to generate timestamps', 'error');\n    }\n  };\n\n  // Ask question about video\n  const askQuestion = async () => {\n    if (!question.trim()) {\n      setError('Please enter a question');\n      return;\n    }\n    if (!videoUrl.trim()) {\n      setError('Please load a video first');\n      return;\n    }\n\n    setLoading(true);\n    setError('');\n\n    // Add user message\n    const userMessage = {\n      type: 'user',\n      content: question\n    };\n    setMessages(prev => [...prev, userMessage]);\n\n    try {\n      const response = await fetch(`${API_BASE_URL}/smart-question`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          url: videoUrl,\n          question: question + \" Please include specific timestamps in your response using format (0:02:30) without extra words like 'around' or 'at'.\"\n        })\n      });\n\n      const data = await response.json();\n\n      if (data.success) {\n        const aiMessage = {\n          type: 'ai',\n          content: data.answer,\n          method: data.method_used\n        };\n        setMessages(prev => [...prev, aiMessage]);\n      } else {\n        setError(`Failed: ${data.error}`);\n      }\n    } catch (error) {\n      setError(`Connection error: ${error.message}`);\n    } finally {\n      setLoading(false);\n      setQuestion('');\n    }\n  };\n\n  // Handle Enter key\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter' && !loading) {\n      askQuestion();\n    }\n  };\n\n  // Jump to timestamp in video\n  const jumpToTime = (seconds) => {\n    const iframe = document.getElementById('youtube-player');\n    if (iframe) {\n      const baseUrl = iframe.src.split('?')[0];\n      iframe.src = `${baseUrl}?start=${seconds}&autoplay=1`;\n    }\n  };\n\n  // üîß FIXED: Text formatter for HH:MM:SS timestamps\n  const formatText = (text) => {\n    if (typeof text !== 'string') return text;\n    \n    // Clean up markdown and convert to HTML\n    let formattedText = text\n      .replace(/\\*\\*([^*]+)\\*\\*/g, '<strong class=\"bold-text\">$1</strong>')  // **bold**\n      .replace(/\\*([^*]+)\\*/g, '<em class=\"italic-text\">$1</em>')            // *italic*\n      .replace(/\\((\\d{1,2}):(\\d{2}):(\\d{2})\\)/g, '<span class=\"timestamp-placeholder\">$1:$2:$3</span>'); // HH:MM:SS timestamps\n    \n    // Split by timestamp placeholders and create clickable buttons\n    const parts = formattedText.split(/<span class=\"timestamp-placeholder\">(\\d{1,2}:\\d{2}:\\d{2})<\\/span>/);\n    const result = [];\n    \n    for (let i = 0; i < parts.length; i++) {\n      if (i % 2 === 0) {\n        // Regular text with HTML formatting\n        if (parts[i]) {\n          result.push(\n            <span \n              key={i} \n              dangerouslySetInnerHTML={{ __html: parts[i] }}\n            />\n          );\n        }\n      } else {\n        // üîß FIXED: Parse HH:MM:SS timestamp and make it clickable\n        const [hours, minutes, seconds] = parts[i].split(':').map(Number);\n        const totalSeconds = hours * 3600 + minutes * 60 + seconds;\n        \n        result.push(\n          <button\n            key={i}\n            className=\"timestamp-link\"\n            onClick={() => jumpToTime(totalSeconds)}\n          >\n            {parts[i]}\n          </button>\n        );\n      }\n    }\n    \n    return result.length > 0 ? result : text;\n  };\n\n  return (\n    <div className=\"App\">\n      {/* Notifications - Right Side */}\n      <div className=\"notifications\">\n        {notifications.map(notification => (\n          <div key={notification.id} className={`notification ${notification.type}`}>\n            {notification.message}\n          </div>\n        ))}\n      </div>\n\n      {/* Header */}\n      <header className=\"header\">\n        <h1>üé¨ Video Analysis AI</h1>\n        <p>Ask questions about any YouTube video!</p>\n      </header>\n\n      {/* Main Content */}\n      <div className=\"main-content\">\n        \n        {/* Video Section */}\n        <div className=\"video-section\">\n          {/* URL Input */}\n          <div className=\"url-input\">\n            <h3>üìπ Load YouTube Video</h3>\n            <div className=\"input-group\">\n              <input\n                type=\"text\"\n                placeholder=\"Paste YouTube URL here...\"\n                value={videoUrl}\n                onChange={(e) => setVideoUrl(e.target.value)}\n                className=\"url-field\"\n              />\n              <button onClick={loadVideo} className=\"load-btn\">\n                Load Video\n              </button>\n            </div>\n          </div>\n\n          {/* YouTube Player */}\n          {videoId && (\n            <div className=\"video-player\">\n              <iframe\n                id=\"youtube-player\"\n                src={`https://www.youtube.com/embed/${videoId}`}\n                title=\"YouTube video player\"\n                frameBorder=\"0\"\n                allowFullScreen\n              ></iframe>\n            </div>\n          )}\n\n          {/* Auto-Generated Timestamps */}\n          {timestamps.length > 0 && (\n            <div className=\"timestamps-section\">\n              <h4>üïê Video Chapters</h4>\n              <p>Click any timestamp to jump to that moment</p>\n              <div className=\"timestamps-list\">\n                {timestamps.map((item, index) => (\n                  <div\n                    key={index}\n                    className=\"timestamp-item\"\n                    onClick={() => jumpToTime(item.seconds)}\n                  >\n                    <span className=\"time\">{item.time}</span>\n                    <span className=\"title\">{item.title}</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Chat Section */}\n        <div className=\"chat-section\">\n          <div className=\"chat-header\">\n            <h3>üí¨ Ask Questions</h3>\n            {videoTitle && <div className=\"video-title\">üé¨ {videoTitle}</div>}\n          </div>\n          \n          {/* Chat Messages */}\n          <div className=\"chat-messages\" ref={chatRef}>\n            {messages.length === 0 && (\n              <div className=\"welcome\">\n                <h4>Welcome! üöÄ</h4>\n                <p>Load a video above and start asking questions</p>\n                <div className=\"examples\">\n                  <div className=\"example\">üí¨ \"What is this video about?\"</div>\n                  <div className=\"example\">üé® \"What color is the car?\"</div>\n                  <div className=\"example\">üìù \"Summarize the main points\"</div>\n                </div>\n              </div>\n            )}\n\n            {messages.map((message, index) => (\n              <div key={index} className={`message ${message.type}`}>\n                \n                {/* System Message */}\n                {message.type === 'system' && (\n                  <div className=\"system-msg\">\n                    <span>{message.content}</span>\n                  </div>\n                )}\n\n                {/* User Message */}\n                {message.type === 'user' && (\n                  <div className=\"user-msg\">\n                    <div className=\"avatar\">You</div>\n                    <div className=\"content\">\n                      <div className=\"text\">{message.content}</div>\n                    </div>\n                  </div>\n                )}\n\n                {/* AI Message */}\n                {message.type === 'ai' && (\n                  <div className=\"ai-msg\">\n                    <div className=\"avatar\">ü§ñ</div>\n                    <div className=\"content\">\n                      <div className=\"badge\">\n                        {message.method === 'Visual Analysis' ? 'üëÅÔ∏è Visual' : 'üìù Text'}\n                      </div>\n                      <div className=\"text\">\n                        {formatText(message.content)}\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n            ))}\n\n            {/* Loading Message */}\n            {loading && (\n              <div className=\"message ai\">\n                <div className=\"ai-msg\">\n                  <div className=\"avatar\">ü§ñ</div>\n                  <div className=\"content\">\n                    <div className=\"loading\">Analyzing video</div>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Error Display */}\n          {error && (\n            <div className=\"error\">\n              ‚ö†Ô∏è {error}\n              <button onClick={() => setError('')}>√ó</button>\n            </div>\n          )}\n\n          {/* Question Input */}\n          <div className=\"question-input\">\n            <div className=\"input-group\">\n              <input\n                type=\"text\"\n                placeholder=\"Ask any question about the video...\"\n                value={question}\n                onChange={(e) => setQuestion(e.target.value)}\n                onKeyPress={handleKeyPress}\n                disabled={loading}\n                className=\"question-field\"\n              />\n              <button \n                onClick={askQuestion}\n                disabled={loading || !question.trim() || !videoId}\n                className=\"ask-btn\"\n              >\n                {loading ? '‚è≥' : 'üöÄ'}\n              </button>\n            </div>\n            \n            {videoId && (\n              <div className=\"hint\">\n                üí° Ask about content, visuals, or request summaries!\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Footer */}\n      <footer className=\"footer\">\n        <p>‚ö° Powered by AI ‚Ä¢ üéØ Smart Analysis ‚Ä¢ ‚è∞ Auto-Timestamps</p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}