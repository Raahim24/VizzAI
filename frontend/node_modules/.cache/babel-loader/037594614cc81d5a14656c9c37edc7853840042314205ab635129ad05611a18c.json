{"ast":null,"code":"var _jsxFileName = \"/Users/raahim/Desktop/Coding/Headstarter/VideoAI/frontend/src/App.js\",\n  _s = $RefreshSig$();\n// App.js - Video Analysis Frontend\nimport React, { useState, useRef, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://localhost:8000';\nfunction App() {\n  _s();\n  // State management\n  const [videoUrl, setVideoUrl] = useState('');\n  const [question, setQuestion] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [videoId, setVideoId] = useState('');\n  const [videoTitle, setVideoTitle] = useState('');\n  const [timestamps, setTimestamps] = useState([]);\n  const [error, setError] = useState('');\n  const [notifications, setNotifications] = useState([]);\n  const chatRef = useRef(null);\n\n  // Auto-scroll chat when new messages arrive\n  useEffect(() => {\n    if (chatRef.current) {\n      chatRef.current.scrollTop = chatRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  // Notification system\n  const showNotification = (message, type = 'info', persistent = false) => {\n    const id = Date.now();\n    const newNotification = {\n      id,\n      message,\n      type,\n      persistent\n    };\n    setNotifications(prev => [...prev, newNotification]);\n    if (!persistent) {\n      setTimeout(() => {\n        setNotifications(prev => prev.filter(n => n.id !== id));\n      }, 4000);\n    }\n    return id;\n  };\n  const removeNotification = id => {\n    setNotifications(prev => prev.filter(n => n.id !== id));\n  };\n\n  // Extract YouTube video ID from URL\n  const getVideoId = url => {\n    const patterns = [/youtube\\.com\\/watch\\?v=([^&\\n?#]+)/, /youtu\\.be\\/([^&\\n?#]+)/, /youtube\\.com\\/embed\\/([^&\\n?#]+)/];\n    for (let pattern of patterns) {\n      const match = url.match(pattern);\n      if (match) return match[1];\n    }\n    return null;\n  };\n\n  // Parse time string to seconds\n  const parseTimeToSeconds = timeStr => {\n    const parts = timeStr.split(':').map(Number);\n    if (parts.length === 3) {\n      // HH:MM:SS format\n      return parts[0] * 3600 + parts[1] * 60 + parts[2];\n    } else if (parts.length === 2) {\n      // MM:SS format\n      return parts[0] * 60 + parts[1];\n    }\n    return 0;\n  };\n\n  // Format seconds to HH:MM:SS\n  const formatTime = seconds => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor(seconds % 3600 / 60);\n    const secs = seconds % 60;\n    return `${hours}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  // Generate timestamps from structured transcript data\n  const createTimestampsFromTranscript = structuredData => {\n    const timestampLoadingId = showNotification('Creating chapters from transcript...', 'loading', true);\n    try {\n      const chapters = [];\n      const totalSegments = structuredData.length;\n      const segmentsPerChapter = Math.max(50, Math.floor(totalSegments / 15));\n      for (let i = 0; i < totalSegments; i += segmentsPerChapter) {\n        const segment = structuredData[i];\n        if (segment !== null && segment !== void 0 && segment.text && segment !== null && segment !== void 0 && segment.start_formatted) {\n          // Create chapter title from content\n          let title = segment.text.trim().replace(/^(welcome to|hello|hi there|today we|in this)/i, '').replace(/^(fact|number|tip)( \\d+)?:?/i, '');\n          const words = title.split(' ').filter(word => word.length > 2 && !['the', 'and', 'but', 'for', 'are', 'will', 'can', 'you', 'your'].includes(word.toLowerCase()));\n          const chapterTitle = words.slice(0, 3).join(' ');\n          if (chapterTitle.length > 3) {\n            const totalSeconds = parseTimeToSeconds(segment.start_formatted);\n            chapters.push({\n              time: segment.start_formatted,\n              title: chapterTitle.length > 30 ? chapterTitle.substring(0, 27) + '...' : chapterTitle,\n              seconds: totalSeconds\n            });\n          }\n        }\n      }\n\n      // Add conclusion chapter\n      if (structuredData.length > 0) {\n        const lastSegment = structuredData[structuredData.length - 1];\n        if (lastSegment !== null && lastSegment !== void 0 && lastSegment.end_formatted) {\n          const totalSeconds = parseTimeToSeconds(lastSegment.end_formatted);\n          chapters.push({\n            time: lastSegment.end_formatted,\n            title: 'Conclusion',\n            seconds: totalSeconds\n          });\n        }\n      }\n      setTimestamps(chapters);\n      removeNotification(timestampLoadingId);\n      showNotification('Chapters created successfully!', 'success');\n    } catch (error) {\n      removeNotification(timestampLoadingId);\n      showNotification('Using AI to generate chapters...', 'info');\n      generateAITimestamps(videoUrl);\n    }\n  };\n\n  // Generate timestamps using AI\n  const generateAITimestamps = async url => {\n    const timestampLoadingId = showNotification('Generating timestamps...', 'loading', true);\n    try {\n      const response = await fetch(`${API_BASE_URL}/smart-question`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          url: url,\n          question: \"Create video chapters with short titles. Format: '0:00:00 - Introduction', '0:02:30 - Main Topic', etc. Keep titles under 5 words.\"\n        })\n      });\n      const data = await response.json();\n      if (data.success) {\n        if (data.video_title && !videoTitle) {\n          setVideoTitle(data.video_title);\n        }\n        const lines = data.answer.split('\\n');\n        const newTimestamps = [];\n        lines.forEach(line => {\n          const match = line.match(/(\\d{1,2}):(\\d{2}):(\\d{2})\\s*[-â€“]\\s*(.+)/);\n          if (match) {\n            const hours = parseInt(match[1]);\n            const minutes = parseInt(match[2]);\n            const seconds = parseInt(match[3]);\n            const title = match[4].trim().replace(/\\*\\*/g, '');\n            const displayTime = `${hours}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n            newTimestamps.push({\n              time: displayTime,\n              title: title.length > 40 ? title.substring(0, 37) + '...' : title,\n              seconds: hours * 3600 + minutes * 60 + seconds\n            });\n          }\n        });\n        setTimestamps(newTimestamps);\n        removeNotification(timestampLoadingId);\n        showNotification('Timestamps generated!', 'success');\n      } else {\n        removeNotification(timestampLoadingId);\n        showNotification('Could not generate timestamps', 'error');\n      }\n    } catch (error) {\n      removeNotification(timestampLoadingId);\n      showNotification('Failed to generate timestamps', 'error');\n    }\n  };\n\n  // Load video and extract transcript\n  const loadVideo = async () => {\n    const id = getVideoId(videoUrl);\n    if (!id) {\n      setError('Please enter a valid YouTube URL');\n      return;\n    }\n\n    // Reset state\n    setVideoId(id);\n    setMessages([]);\n    setTimestamps([]);\n    setError('');\n    const videoLoadingId = showNotification('Loading video and extracting transcript', 'loading', true);\n    try {\n      const response = await fetch(`${API_BASE_URL}/process-youtube`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          url: videoUrl\n        })\n      });\n      const data = await response.json();\n      if (!data.success) {\n        removeNotification(videoLoadingId);\n        showNotification('Failed to process video: ' + data.error, 'error');\n        setError('Could not extract transcript from this video');\n        return;\n      }\n      removeNotification(videoLoadingId);\n      showNotification('Video transcript extracted successfully!', 'success');\n      setVideoTitle(data.video_title || 'Unknown Video');\n      setMessages([{\n        type: 'system',\n        content: `Video loaded! Ask questions about \"${data.video_title || 'this video'}\".`,\n        time: new Date().toLocaleTimeString()\n      }]);\n\n      // Just use AI-generated timestamps since it was working better\n      await generateAITimestamps(videoUrl);\n    } catch (error) {\n      removeNotification(videoLoadingId);\n      showNotification('Connection error: ' + error.message, 'error');\n      setError('Failed to connect to server');\n    }\n  };\n\n  // Ask question about video\n  const askQuestion = async () => {\n    if (!question.trim()) {\n      setError('Please enter a question');\n      return;\n    }\n    if (!videoUrl.trim()) {\n      setError('Please load a video first');\n      return;\n    }\n    setLoading(true);\n    setError('');\n    const userMessage = {\n      type: 'user',\n      content: question\n    };\n    setMessages(prev => [...prev, userMessage]);\n    try {\n      const response = await fetch(`${API_BASE_URL}/smart-question`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          url: videoUrl,\n          question: question + \" Please include specific timestamps in your response using format (0:02:30) without extra words like 'around' or 'at'.\"\n        })\n      });\n      const data = await response.json();\n      if (data.success) {\n        const aiMessage = {\n          type: 'ai',\n          content: data.answer,\n          method: data.method_used\n        };\n        setMessages(prev => [...prev, aiMessage]);\n      } else {\n        setError(`Failed: ${data.error}`);\n      }\n    } catch (error) {\n      setError(`Connection error: ${error.message}`);\n    } finally {\n      setLoading(false);\n      setQuestion('');\n    }\n  };\n\n  // Handle Enter key press\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && !loading) {\n      askQuestion();\n    }\n  };\n\n  // Jump to specific time in video\n  const jumpToTime = seconds => {\n    const iframe = document.getElementById('youtube-player');\n    if (iframe) {\n      const baseUrl = iframe.src.split('?')[0];\n      iframe.src = `${baseUrl}?start=${seconds}&autoplay=1`;\n    }\n  };\n\n  // Format text with clickable timestamps\n  const formatText = text => {\n    if (typeof text !== 'string') return text;\n    let formattedText = text.replace(/\\*\\*([^*]+)\\*\\*/g, '<strong class=\"bold-text\">$1</strong>').replace(/\\*([^*]+)\\*/g, '<em class=\"italic-text\">$1</em>').replace(/\\((\\d{1,2}):(\\d{2}):(\\d{2})\\)/g, '<span class=\"timestamp-placeholder\">$1:$2:$3</span>');\n    const parts = formattedText.split(/<span class=\"timestamp-placeholder\">(\\d{1,2}:\\d{2}:\\d{2})<\\/span>/);\n    const result = [];\n    for (let i = 0; i < parts.length; i++) {\n      if (i % 2 === 0) {\n        if (parts[i]) {\n          result.push(/*#__PURE__*/_jsxDEV(\"span\", {\n            dangerouslySetInnerHTML: {\n              __html: parts[i]\n            }\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 13\n          }, this));\n        }\n      } else {\n        const totalSeconds = parseTimeToSeconds(parts[i]);\n        result.push(/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"timestamp-link\",\n          onClick: () => jumpToTime(totalSeconds),\n          children: parts[i]\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 11\n        }, this));\n      }\n    }\n    return result.length > 0 ? result : text;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notifications\",\n      children: notifications.map(notification => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `notification ${notification.type}`,\n        children: notification.message\n      }, notification.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"VizzAI\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Ask questions about any YouTube video!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"url-input\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Load YouTube Video\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 381,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"Paste YouTube URL here...\",\n              value: videoUrl,\n              onChange: e => setVideoUrl(e.target.value),\n              className: \"url-field\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 383,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: loadVideo,\n              className: \"load-btn\",\n              children: \"Load Video\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 390,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 382,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 11\n        }, this), videoId && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"video-player\",\n          children: /*#__PURE__*/_jsxDEV(\"iframe\", {\n            id: \"youtube-player\",\n            src: `https://www.youtube.com/embed/${videoId}`,\n            title: \"YouTube video player\",\n            frameBorder: \"0\",\n            allowFullScreen: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 399,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 13\n        }, this), timestamps.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"timestamps-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Video Chapters\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 412,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Click any timestamp to jump to that moment\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 413,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"timestamps-list\",\n            children: timestamps.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"timestamp-item\",\n              onClick: () => jumpToTime(item.seconds),\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"time\",\n                children: item.time\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 421,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"title\",\n                children: item.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 422,\n                columnNumber: 21\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 416,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 414,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Ask Questions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 433,\n            columnNumber: 13\n          }, this), videoTitle && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"video-title\",\n            children: videoTitle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 434,\n            columnNumber: 28\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 432,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-messages\",\n          ref: chatRef,\n          children: [messages.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"welcome\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Welcome!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 440,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Load a video above and start asking questions\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 441,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"examples\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"example\",\n                children: \"\\\"What is this video about?\\\"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 443,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"example\",\n                children: \"\\\"What color is the car?\\\"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 444,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"example\",\n                children: \"\\\"Summarize the main points\\\"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 445,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 442,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 439,\n            columnNumber: 15\n          }, this), messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `message ${message.type}`,\n            children: [message.type === 'system' && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"system-msg\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                children: message.content\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 455,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 454,\n              columnNumber: 19\n            }, this), message.type === 'user' && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"user-msg\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"avatar\",\n                children: \"You\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 461,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"content\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"text\",\n                  children: message.content\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 463,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 462,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 460,\n              columnNumber: 19\n            }, this), message.type === 'ai' && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ai-msg\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"avatar\",\n                children: \"AI\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 470,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"content\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"badge\",\n                  children: message.method === 'Visual Analysis' ? 'Visual' : 'Text'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 472,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"text\",\n                  children: formatText(message.content)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 475,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 471,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 469,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 451,\n            columnNumber: 15\n          }, this)), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message ai\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ai-msg\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"avatar\",\n                children: \"AI\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 487,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"content\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"loading\",\n                  children: \"Analyzing video\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 489,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 488,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 486,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 485,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 437,\n          columnNumber: 11\n        }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error\",\n          children: [error, /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setError(''),\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 499,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 497,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question-input\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"Ask any question about the video...\",\n              value: question,\n              onChange: e => setQuestion(e.target.value),\n              onKeyPress: handleKeyPress,\n              disabled: loading,\n              className: \"question-field\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 505,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: askQuestion,\n              disabled: loading || !question.trim() || !videoId,\n              className: \"ask-btn\",\n              children: loading ? 'Loading...' : 'Ask'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 514,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 504,\n            columnNumber: 13\n          }, this), videoId && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"hint\",\n            children: \"Ask about content, visuals, or request summaries!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 524,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 503,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      className: \"footer\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Made by Raahim Khan\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 534,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 533,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 359,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"+EgwkWHNCUpaBbjHwY60bEu6vNc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","API_BASE_URL","App","_s","videoUrl","setVideoUrl","question","setQuestion","messages","setMessages","loading","setLoading","videoId","setVideoId","videoTitle","setVideoTitle","timestamps","setTimestamps","error","setError","notifications","setNotifications","chatRef","current","scrollTop","scrollHeight","showNotification","message","type","persistent","id","Date","now","newNotification","prev","setTimeout","filter","n","removeNotification","getVideoId","url","patterns","pattern","match","parseTimeToSeconds","timeStr","parts","split","map","Number","length","formatTime","seconds","hours","Math","floor","minutes","secs","toString","padStart","createTimestampsFromTranscript","structuredData","timestampLoadingId","chapters","totalSegments","segmentsPerChapter","max","i","segment","text","start_formatted","title","trim","replace","words","word","includes","toLowerCase","chapterTitle","slice","join","totalSeconds","push","time","substring","lastSegment","end_formatted","generateAITimestamps","response","fetch","method","headers","body","JSON","stringify","data","json","success","video_title","lines","answer","newTimestamps","forEach","line","parseInt","displayTime","loadVideo","videoLoadingId","content","toLocaleTimeString","askQuestion","userMessage","aiMessage","method_used","handleKeyPress","e","key","jumpToTime","iframe","document","getElementById","baseUrl","src","formatText","formattedText","result","dangerouslySetInnerHTML","__html","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","children","notification","placeholder","value","onChange","target","frameBorder","allowFullScreen","item","index","ref","onKeyPress","disabled","_c","$RefreshReg$"],"sources":["/Users/raahim/Desktop/Coding/Headstarter/VideoAI/frontend/src/App.js"],"sourcesContent":["// App.js - Video Analysis Frontend\nimport React, { useState, useRef, useEffect } from 'react';\nimport './App.css';\n\nconst API_BASE_URL = 'http://localhost:8000';\n\nfunction App() {\n  // State management\n  const [videoUrl, setVideoUrl] = useState('');\n  const [question, setQuestion] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [videoId, setVideoId] = useState('');\n  const [videoTitle, setVideoTitle] = useState('');\n  const [timestamps, setTimestamps] = useState([]);\n  const [error, setError] = useState('');\n  const [notifications, setNotifications] = useState([]);\n  \n  const chatRef = useRef(null);\n\n  // Auto-scroll chat when new messages arrive\n  useEffect(() => {\n    if (chatRef.current) {\n      chatRef.current.scrollTop = chatRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  // Notification system\n  const showNotification = (message, type = 'info', persistent = false) => {\n    const id = Date.now();\n    const newNotification = { id, message, type, persistent };\n    setNotifications(prev => [...prev, newNotification]);\n    \n    if (!persistent) {\n      setTimeout(() => {\n        setNotifications(prev => prev.filter(n => n.id !== id));\n      }, 4000);\n    }\n    \n    return id;\n  };\n\n  const removeNotification = (id) => {\n    setNotifications(prev => prev.filter(n => n.id !== id));\n  };\n\n  // Extract YouTube video ID from URL\n  const getVideoId = (url) => {\n    const patterns = [\n      /youtube\\.com\\/watch\\?v=([^&\\n?#]+)/,\n      /youtu\\.be\\/([^&\\n?#]+)/,\n      /youtube\\.com\\/embed\\/([^&\\n?#]+)/\n    ];\n    \n    for (let pattern of patterns) {\n      const match = url.match(pattern);\n      if (match) return match[1];\n    }\n    return null;\n  };\n\n  // Parse time string to seconds\n  const parseTimeToSeconds = (timeStr) => {\n    const parts = timeStr.split(':').map(Number);\n    if (parts.length === 3) {\n      // HH:MM:SS format\n      return parts[0] * 3600 + parts[1] * 60 + parts[2];\n    } else if (parts.length === 2) {\n      // MM:SS format\n      return parts[0] * 60 + parts[1];\n    }\n    return 0;\n  };\n\n  // Format seconds to HH:MM:SS\n  const formatTime = (seconds) => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    const secs = seconds % 60;\n    return `${hours}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  // Generate timestamps from structured transcript data\n  const createTimestampsFromTranscript = (structuredData) => {\n    const timestampLoadingId = showNotification('Creating chapters from transcript...', 'loading', true);\n    \n    try {\n      const chapters = [];\n      const totalSegments = structuredData.length;\n      const segmentsPerChapter = Math.max(50, Math.floor(totalSegments / 15));\n      \n      for (let i = 0; i < totalSegments; i += segmentsPerChapter) {\n        const segment = structuredData[i];\n        \n        if (segment?.text && segment?.start_formatted) {\n          // Create chapter title from content\n          let title = segment.text.trim()\n            .replace(/^(welcome to|hello|hi there|today we|in this)/i, '')\n            .replace(/^(fact|number|tip)( \\d+)?:?/i, '');\n          \n          const words = title.split(' ').filter(word => \n            word.length > 2 && \n            !['the', 'and', 'but', 'for', 'are', 'will', 'can', 'you', 'your'].includes(word.toLowerCase())\n          );\n          \n          const chapterTitle = words.slice(0, 3).join(' ');\n          \n          if (chapterTitle.length > 3) {\n            const totalSeconds = parseTimeToSeconds(segment.start_formatted);\n            \n            chapters.push({\n              time: segment.start_formatted,\n              title: chapterTitle.length > 30 ? chapterTitle.substring(0, 27) + '...' : chapterTitle,\n              seconds: totalSeconds\n            });\n          }\n        }\n      }\n      \n      // Add conclusion chapter\n      if (structuredData.length > 0) {\n        const lastSegment = structuredData[structuredData.length - 1];\n        if (lastSegment?.end_formatted) {\n          const totalSeconds = parseTimeToSeconds(lastSegment.end_formatted);\n          chapters.push({\n            time: lastSegment.end_formatted,\n            title: 'Conclusion',\n            seconds: totalSeconds\n          });\n        }\n      }\n      \n      setTimestamps(chapters);\n      removeNotification(timestampLoadingId);\n      showNotification('Chapters created successfully!', 'success');\n      \n    } catch (error) {\n      removeNotification(timestampLoadingId);\n      showNotification('Using AI to generate chapters...', 'info');\n      generateAITimestamps(videoUrl);\n    }\n  };\n\n  // Generate timestamps using AI\n  const generateAITimestamps = async (url) => {\n    const timestampLoadingId = showNotification('Generating timestamps...', 'loading', true);\n    \n    try {\n      const response = await fetch(`${API_BASE_URL}/smart-question`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          url: url,\n          question: \"Create video chapters with short titles. Format: '0:00:00 - Introduction', '0:02:30 - Main Topic', etc. Keep titles under 5 words.\"\n        })\n      });\n\n      const data = await response.json();\n\n      if (data.success) {\n        if (data.video_title && !videoTitle) {\n          setVideoTitle(data.video_title);\n        }\n        \n        const lines = data.answer.split('\\n');\n        const newTimestamps = [];\n        \n        lines.forEach(line => {\n          const match = line.match(/(\\d{1,2}):(\\d{2}):(\\d{2})\\s*[-â€“]\\s*(.+)/);\n          if (match) {\n            const hours = parseInt(match[1]);\n            const minutes = parseInt(match[2]);\n            const seconds = parseInt(match[3]);\n            const title = match[4].trim().replace(/\\*\\*/g, '');\n            \n            const displayTime = `${hours}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n            \n            newTimestamps.push({\n              time: displayTime,\n              title: title.length > 40 ? title.substring(0, 37) + '...' : title,\n              seconds: hours * 3600 + minutes * 60 + seconds\n            });\n          }\n        });\n        \n        setTimestamps(newTimestamps);\n        removeNotification(timestampLoadingId);\n        showNotification('Timestamps generated!', 'success');\n      } else {\n        removeNotification(timestampLoadingId);\n        showNotification('Could not generate timestamps', 'error');\n      }\n    } catch (error) {\n      removeNotification(timestampLoadingId);\n      showNotification('Failed to generate timestamps', 'error');\n    }\n  };\n\n  // Load video and extract transcript\n  const loadVideo = async () => {\n    const id = getVideoId(videoUrl);\n    if (!id) {\n      setError('Please enter a valid YouTube URL');\n      return;\n    }\n\n    // Reset state\n    setVideoId(id);\n    setMessages([]);\n    setTimestamps([]);\n    setError('');\n    \n    const videoLoadingId = showNotification('Loading video and extracting transcript', 'loading', true);\n    \n    try {\n      const response = await fetch(`${API_BASE_URL}/process-youtube`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ url: videoUrl })\n      });\n\n      const data = await response.json();\n\n      if (!data.success) {\n        removeNotification(videoLoadingId);\n        showNotification('Failed to process video: ' + data.error, 'error');\n        setError('Could not extract transcript from this video');\n        return;\n      }\n\n      removeNotification(videoLoadingId);\n      showNotification('Video transcript extracted successfully!', 'success');\n      \n      setVideoTitle(data.video_title || 'Unknown Video');\n      \n      setMessages([{\n        type: 'system',\n        content: `Video loaded! Ask questions about \"${data.video_title || 'this video'}\".`,\n        time: new Date().toLocaleTimeString()\n      }]);\n\n      // Just use AI-generated timestamps since it was working better\n      await generateAITimestamps(videoUrl);\n      \n    } catch (error) {\n      removeNotification(videoLoadingId);\n      showNotification('Connection error: ' + error.message, 'error');\n      setError('Failed to connect to server');\n    }\n  };\n\n  // Ask question about video\n  const askQuestion = async () => {\n    if (!question.trim()) {\n      setError('Please enter a question');\n      return;\n    }\n    if (!videoUrl.trim()) {\n      setError('Please load a video first');\n      return;\n    }\n\n    setLoading(true);\n    setError('');\n\n    const userMessage = {\n      type: 'user',\n      content: question\n    };\n    setMessages(prev => [...prev, userMessage]);\n\n    try {\n      const response = await fetch(`${API_BASE_URL}/smart-question`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          url: videoUrl,\n          question: question + \" Please include specific timestamps in your response using format (0:02:30) without extra words like 'around' or 'at'.\"\n        })\n      });\n\n      const data = await response.json();\n\n      if (data.success) {\n        const aiMessage = {\n          type: 'ai',\n          content: data.answer,\n          method: data.method_used\n        };\n        setMessages(prev => [...prev, aiMessage]);\n      } else {\n        setError(`Failed: ${data.error}`);\n      }\n    } catch (error) {\n      setError(`Connection error: ${error.message}`);\n    } finally {\n      setLoading(false);\n      setQuestion('');\n    }\n  };\n\n  // Handle Enter key press\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter' && !loading) {\n      askQuestion();\n    }\n  };\n\n  // Jump to specific time in video\n  const jumpToTime = (seconds) => {\n    const iframe = document.getElementById('youtube-player');\n    if (iframe) {\n      const baseUrl = iframe.src.split('?')[0];\n      iframe.src = `${baseUrl}?start=${seconds}&autoplay=1`;\n    }\n  };\n\n  // Format text with clickable timestamps\n  const formatText = (text) => {\n    if (typeof text !== 'string') return text;\n    \n    let formattedText = text\n      .replace(/\\*\\*([^*]+)\\*\\*/g, '<strong class=\"bold-text\">$1</strong>')\n      .replace(/\\*([^*]+)\\*/g, '<em class=\"italic-text\">$1</em>')\n      .replace(/\\((\\d{1,2}):(\\d{2}):(\\d{2})\\)/g, '<span class=\"timestamp-placeholder\">$1:$2:$3</span>');\n    \n    const parts = formattedText.split(/<span class=\"timestamp-placeholder\">(\\d{1,2}:\\d{2}:\\d{2})<\\/span>/);\n    const result = [];\n    \n    for (let i = 0; i < parts.length; i++) {\n      if (i % 2 === 0) {\n        if (parts[i]) {\n          result.push(\n            <span \n              key={i} \n              dangerouslySetInnerHTML={{ __html: parts[i] }}\n            />\n          );\n        }\n      } else {\n        const totalSeconds = parseTimeToSeconds(parts[i]);\n        \n        result.push(\n          <button\n            key={i}\n            className=\"timestamp-link\"\n            onClick={() => jumpToTime(totalSeconds)}\n          >\n            {parts[i]}\n          </button>\n        );\n      }\n    }\n    \n    return result.length > 0 ? result : text;\n  };\n\n  return (\n    <div className=\"App\">\n      {/* Notifications */}\n      <div className=\"notifications\">\n        {notifications.map(notification => (\n          <div key={notification.id} className={`notification ${notification.type}`}>\n            {notification.message}\n          </div>\n        ))}\n      </div>\n\n      {/* Header */}\n      <header className=\"header\">\n        <h1>VizzAI</h1>\n        <p>Ask questions about any YouTube video!</p>\n      </header>\n\n      {/* Main Content */}\n      <div className=\"main-content\">\n        \n        {/* Video Section */}\n        <div className=\"video-section\">\n          <div className=\"url-input\">\n            <h3>Load YouTube Video</h3>\n            <div className=\"input-group\">\n              <input\n                type=\"text\"\n                placeholder=\"Paste YouTube URL here...\"\n                value={videoUrl}\n                onChange={(e) => setVideoUrl(e.target.value)}\n                className=\"url-field\"\n              />\n              <button onClick={loadVideo} className=\"load-btn\">\n                Load Video\n              </button>\n            </div>\n          </div>\n\n          {/* YouTube Player */}\n          {videoId && (\n            <div className=\"video-player\">\n              <iframe\n                id=\"youtube-player\"\n                src={`https://www.youtube.com/embed/${videoId}`}\n                title=\"YouTube video player\"\n                frameBorder=\"0\"\n                allowFullScreen\n              ></iframe>\n            </div>\n          )}\n\n          {/* Video Chapters */}\n          {timestamps.length > 0 && (\n            <div className=\"timestamps-section\">\n              <h4>Video Chapters</h4>\n              <p>Click any timestamp to jump to that moment</p>\n              <div className=\"timestamps-list\">\n                {timestamps.map((item, index) => (\n                  <div\n                    key={index}\n                    className=\"timestamp-item\"\n                    onClick={() => jumpToTime(item.seconds)}\n                  >\n                    <span className=\"time\">{item.time}</span>\n                    <span className=\"title\">{item.title}</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Chat Section */}\n        <div className=\"chat-section\">\n          <div className=\"chat-header\">\n            <h3>Ask Questions</h3>\n            {videoTitle && <div className=\"video-title\">{videoTitle}</div>}\n          </div>\n          \n          <div className=\"chat-messages\" ref={chatRef}>\n            {messages.length === 0 && (\n              <div className=\"welcome\">\n                <h4>Welcome!</h4>\n                <p>Load a video above and start asking questions</p>\n                <div className=\"examples\">\n                  <div className=\"example\">\"What is this video about?\"</div>\n                  <div className=\"example\">\"What color is the car?\"</div>\n                  <div className=\"example\">\"Summarize the main points\"</div>\n                </div>\n              </div>\n            )}\n\n            {messages.map((message, index) => (\n              <div key={index} className={`message ${message.type}`}>\n                \n                {message.type === 'system' && (\n                  <div className=\"system-msg\">\n                    <span>{message.content}</span>\n                  </div>\n                )}\n\n                {message.type === 'user' && (\n                  <div className=\"user-msg\">\n                    <div className=\"avatar\">You</div>\n                    <div className=\"content\">\n                      <div className=\"text\">{message.content}</div>\n                    </div>\n                  </div>\n                )}\n\n                {message.type === 'ai' && (\n                  <div className=\"ai-msg\">\n                    <div className=\"avatar\">AI</div>\n                    <div className=\"content\">\n                      <div className=\"badge\">\n                        {message.method === 'Visual Analysis' ? 'Visual' : 'Text'}\n                      </div>\n                      <div className=\"text\">\n                        {formatText(message.content)}\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n            ))}\n\n            {loading && (\n              <div className=\"message ai\">\n                <div className=\"ai-msg\">\n                  <div className=\"avatar\">AI</div>\n                  <div className=\"content\">\n                    <div className=\"loading\">Analyzing video</div>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n\n          {error && (\n            <div className=\"error\">\n              {error}\n              <button onClick={() => setError('')}>Ã—</button>\n            </div>\n          )}\n\n          <div className=\"question-input\">\n            <div className=\"input-group\">\n              <input\n                type=\"text\"\n                placeholder=\"Ask any question about the video...\"\n                value={question}\n                onChange={(e) => setQuestion(e.target.value)}\n                onKeyPress={handleKeyPress}\n                disabled={loading}\n                className=\"question-field\"\n              />\n              <button \n                onClick={askQuestion}\n                disabled={loading || !question.trim() || !videoId}\n                className=\"ask-btn\"\n              >\n                {loading ? 'Loading...' : 'Ask'}\n              </button>\n            </div>\n            \n            {videoId && (\n              <div className=\"hint\">\n                Ask about content, visuals, or request summaries!\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Footer */}\n      <footer className=\"footer\">\n        <p>Made by Raahim Khan</p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}